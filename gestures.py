# -*- coding: utf-8 -*- 
"""gestures.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1scBIzRlR4n-NNUMXJAKgUMxoV2yGk3rg
"""

import numpy as np
import pandas as pd
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'  # Run on CPU

import tensorflow as tf
import ltc_model as ltc
from ctrnn_model import CTRNN, NODE, CTGRU
import argparse

def load_trace(filename):
    df = pd.read_csv(filename, header=0)

    str_y = df["Phase"].values
    convert = {"D": 0, "P": 1, "S": 2, "H": 3, "R": 4}
    y = np.empty(str_y.shape[0], dtype=np.int32)
    for i in range(str_y.shape[0]):
        y[i] = convert[str_y[i]]

    x = df.values[:, :-1].astype(np.float32)

    return (x, y)

def cut_in_sequences(tup, seq_len, interleaved=False):
    x, y = tup

    num_sequences = x.shape[0] // seq_len
    sequences = []

    for s in range(num_sequences):
        start = seq_len * s
        end = start + seq_len
        sequences.append((x[start:end], y[start:end]))

        if interleaved and s < num_sequences - 1:
            start += seq_len // 2
            end = start + seq_len
            sequences.append((x[start:end], y[start:end]))

    return sequences

training_files = [
    "a3_va3.csv",
    "b1_va3.csv",
    "b3_va3.csv",
    "c1_va3.csv",
    "c3_va3.csv",
    "a2_va3.csv",
    "a1_va3.csv",
]

class GestureData:

    def __init__(self, seq_len=32):
        train_traces = []
        valid_traces = []
        test_traces = []

        interleaved_train = True
        for f in training_files:
            train_traces.extend(cut_in_sequences(load_trace(os.path.join("data/gesture", f)), seq_len, interleaved=interleaved_train))

        train_x, train_y = list(zip(*train_traces))

        self.train_x = np.stack(train_x, axis=1)
        self.train_y = np.stack(train_y, axis=1)

        flat_x = self.train_x.reshape([-1, self.train_x.shape[-1]])
        mean_x = np.mean(flat_x, axis=0)
        std_x = np.std(flat_x, axis=0)
        self.train_x = (self.train_x - mean_x) / std_x

        total_seqs = self.train_x.shape[1]
        print("Total number of training sequences: {}".format(total_seqs))
        permutation = np.random.RandomState(23489).permutation(total_seqs)
        valid_size = int(0.1 * total_seqs)
        test_size = int(0.15 * total_seqs)

        self.valid_x = self.train_x[:, permutation[:valid_size]]
        self.valid_y = self.train_y[:, permutation[:valid_size]]
        self.test_x = self.train_x[:, permutation[valid_size:valid_size + test_size]]
        self.test_y = self.train_y[:, permutation[valid_size:valid_size + test_size]]
        self.train_x = self.train_x[:, permutation[valid_size + test_size:]]
        self.train_y = self.train_y[:, permutation[valid_size + test_size:]]

    def iterate_train(self, batch_size=16):
        total_seqs = self.train_x.shape[1]
        permutation = np.random.permutation(total_seqs)
        total_batches = total_seqs // batch_size

        for i in range(total_batches):
            start = i * batch_size
            end = start + batch_size
            batch_x = self.train_x[:, permutation[start:end]]
            batch_y = self.train_y[:, permutation[start:end]]
            yield (batch_x, batch_y)

class GestureModel:

    def __init__(self, model_type, model_size, learning_rate=0.001):
        self.model_type = model_type
        self.constrain_op = None
        self.model_size = model_size

        # Replace placeholder with tf.keras.Input for TensorFlow 2 compatibility
        self.x = tf.keras.Input(shape=(None, 32), dtype=tf.float32)
        self.target_y = tf.keras.Input(shape=(None,), dtype=tf.int32)

        head = self.x
        if model_type == "lstm":
            self.fused_cell = tf.keras.layers.LSTM(model_size, return_sequences=True)
            head = self.fused_cell(head)
        elif model_type.startswith("ltc"):
            learning_rate = 0.01  # LTC needs a higher learning rate
            self.wm = ltc.LTCCell(model_size)
            if model_type.endswith("_rk"):
                self.wm._solver = ltc.ODESolver.RungeKutta
            elif model_type.endswith("_ex"):
                self.wm._solver = ltc.ODESolver.Explicit
            else:
                self.wm._solver = ltc.ODESolver.SemiImplicit

            self.rnn_layer = tf.keras.layers.RNN(self.wm, return_sequences=True)
            head = self.rnn_layer(head)
            self.constrain_op = self.wm.get_param_constrain_op()
        elif model_type == "node":
            self.fused_cell = NODE(model_size, cell_clip=-1)
            self.rnn_layer = tf.keras.layers.RNN(self.fused_cell, return_sequences=True)
            head = self.rnn_layer(head)
        elif model_type == "ctgru":
            self.fused_cell = CTGRU(model_size, cell_clip=-1)
            self.rnn_layer = tf.keras.layers.RNN(self.fused_cell, return_sequences=True)
            head = self.rnn_layer(head)
        elif model_type == "ctrnn":
            self.fused_cell = CTRNN(model_size, cell_clip=-1, global_feedback=True)
            self.rnn_layer = tf.keras.layers.RNN(self.fused_cell, return_sequences=True)
            head = self.rnn_layer(head)
        else:
            raise ValueError("Unknown model type '{}'".format(model_type))

        # Final dense layer to classify into 5 categories
        self.y = tf.keras.layers.Dense(5, activation=None)(head)
        self.model = tf.keras.Model(inputs=self.x, outputs=self.y)

        # Compile the model
        self.model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate),
                           loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                           metrics=['accuracy'])

        # Saving mechanism setup
        self.result_file = os.path.join("results", "gesture", "{}_{}.csv".format(model_type, model_size))
        if not os.path.exists("results/gesture"):
            os.makedirs("results/gesture")
        if not os.path.isfile(self.result_file):
            with open(self.result_file, "w") as f:
                f.write("best epoch, train loss, train accuracy, valid loss, valid accuracy, test loss, test accuracy\n")

    def fit(self, gesture_data, epochs, verbose=True, log_period=50):
        best_valid_accuracy = 0
        best_valid_stats = (0, 0, 0, 0, 0, 0, 0)

        for e in range(epochs):
            losses, accs = [], []
            for batch_x, batch_y in gesture_data.iterate_train(batch_size=16):
                history = self.model.train_on_batch(batch_x, batch_y)
                losses.append(history[0])  # loss
                accs.append(history[1])    # accuracy

            if verbose and e % log_period == 0:
                valid_loss, valid_acc = self.model.evaluate(gesture_data.valid_x, gesture_data.valid_y, verbose=0)
                test_loss, test_acc = self.model.evaluate(gesture_data.test_x, gesture_data.test_y, verbose=0)

                # Check for best validation accuracy
                if valid_acc > best_valid_accuracy and e > 0:
                    best_valid_accuracy = valid_acc
                    best_valid_stats = (
                        e,
                        np.mean(losses), np.mean(accs) * 100,
                        valid_loss, valid_acc * 100,
                        test_loss, test_acc * 100
                    )
                    self.model.save_weights(self.result_file.replace('.csv', '_best.weights.h5'))

                print("Epochs {:03d}, train loss: {:0.2f}, train accuracy: {:0.2f}%, valid loss: {:0.2f}, valid accuracy: {:0.2f}%, test loss: {:0.2f}, test accuracy: {:0.2f}%".format(
                    e,
                    np.mean(losses), np.mean(accs) * 100,
                    valid_loss, valid_acc * 100,
                    test_loss, test_acc * 100
                ))

        best_epoch, train_loss, train_acc, valid_loss, valid_acc, test_loss, test_acc = best_valid_stats
        print("Best epoch {:03d}, train loss: {:0.2f}, train accuracy: {:0.2f}%, valid loss: {:0.2f}, valid accuracy: {:0.2f}%, test loss: {:0.2f}, test accuracy: {:0.2f}%".format(
            best_epoch,
            train_loss, train_acc,
            valid_loss, valid_acc,
            test_loss, test_acc
        ))
        with open(self.result_file, "a") as f:
            f.write("{:03d}, {:0.2f}, {:0.2f}, {:0.2f}, {:0.2f}, {:0.2f}, {:0.2f}\n".format(
                best_epoch,
                train_loss, train_acc,
                valid_loss, valid_acc,
                test_loss, test_acc
            ))

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', default="lstm")
    parser.add_argument('--log', default=1, type=int)
    parser.add_argument('--size', default=32, type=int)
    parser.add_argument('--epochs', default=200, type=int)
    args = parser.parse_args()

    gesture_data = GestureData()
    model = GestureModel(model_type=args.model, model_size=args.size)
    model.fit(gesture_data, epochs=args.epochs, log_period=args.log)